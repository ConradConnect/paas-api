'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var superagent = require('superagent');
var querystring = require('querystring');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var superagent__default = /*#__PURE__*/_interopDefaultLegacy(superagent);
var querystring__default = /*#__PURE__*/_interopDefaultLegacy(querystring);

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* @module ApiClient
* @version 1.1.1-beta2
*/

/**
* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an
* application to use this class directly - the *Api and model classes provide the public API for the service. The
* contents of this file should be regarded as internal but are documented for completeness.
* @alias module:ApiClient
* @class
*/
class ApiClient {
    constructor() {
        /**
         * The base URL against which to resolve every API call's (relative) path.
         * @type {String}
         * @default https://dashboard.conradconnect.de/paasapi/
         */
        this.basePath = 'https://dashboard.conradconnect.de/paasapi/'.replace(/\/+$/, '');

        /**
         * The authentication methods to be included for all API calls.
         * @type {Array.<String>}
         */
        this.authentications = {
            'httpBasicClientCredentials': {type: 'basic'}
        };

        /**
         * The default HTTP headers to be included for all API calls.
         * @type {Array.<String>}
         * @default {}
         */
        this.defaultHeaders = {};

        /**
         * The default HTTP timeout for all API calls.
         * @type {Number}
         * @default 60000
         */
        this.timeout = 60000;

        /**
         * If set to false an additional timestamp parameter is added to all API GET calls to
         * prevent browser caching
         * @type {Boolean}
         * @default true
         */
        this.cache = true;

        /**
         * If set to true, the client will save the cookies from each server
         * response, and return them in the next request.
         * @default false
         */
        this.enableCookies = false;

        /*
         * Used to save and return cookies in a node.js (non-browser) setting,
         * if this.enableCookies is set to true.
         */
        if (typeof window === 'undefined') {
          this.agent = new superagent__default['default'].agent();
        }

        /*
         * Allow user to override superagent agent
         */
         this.requestAgent = null;

    }

    /**
    * Returns a string representation for an actual parameter.
    * @param param The actual parameter.
    * @returns {String} The string representation of <code>param</code>.
    */
    paramToString(param) {
        if (param == undefined || param == null) {
            return '';
        }
        if (param instanceof Date) {
            return param.toJSON();
        }

        return param.toString();
    }

    /**
    * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.
    * NOTE: query parameters are not handled here.
    * @param {String} path The path to append to the base URL.
    * @param {Object} pathParams The parameter values to append.
    * @returns {String} The encoded path with parameter values substituted.
    */
    buildUrl(path, pathParams) {
        if (!path.match(/^\//)) {
            path = '/' + path;
        }

        var url = this.basePath + path;
        url = url.replace(/\{([\w-]+)\}/g, (fullMatch, key) => {
            var value;
            if (pathParams.hasOwnProperty(key)) {
                value = this.paramToString(pathParams[key]);
            } else {
                value = fullMatch;
            }

            return encodeURIComponent(value);
        });

        return url;
    }

    /**
    * Checks whether the given content type represents JSON.<br>
    * JSON content type examples:<br>
    * <ul>
    * <li>application/json</li>
    * <li>application/json; charset=UTF8</li>
    * <li>APPLICATION/JSON</li>
    * </ul>
    * @param {String} contentType The MIME content type to check.
    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.
    */
    isJsonMime(contentType) {
        return Boolean(contentType != null && contentType.match(/^application\/json(;.*)?$/i));
    }

    /**
    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.
    * @param {Array.<String>} contentTypes
    * @returns {String} The chosen content type, preferring JSON.
    */
    jsonPreferredMime(contentTypes) {
        for (var i = 0; i < contentTypes.length; i++) {
            if (this.isJsonMime(contentTypes[i])) {
                return contentTypes[i];
            }
        }

        return contentTypes[0];
    }

    /**
    * Checks whether the given parameter value represents file-like content.
    * @param param The parameter to check.
    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
    */
    isFileParam(param) {
        // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)
        if (typeof require === 'function') {
            let fs;
            try {
                fs = require('fs');
            } catch (err) {}
            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {
                return true;
            }
        }

        // Buffer in Node.js
        if (typeof Buffer === 'function' && param instanceof Buffer) {
            return true;
        }

        // Blob in browser
        if (typeof Blob === 'function' && param instanceof Blob) {
            return true;
        }

        // File in browser (it seems File object is also instance of Blob, but keep this for safe)
        if (typeof File === 'function' && param instanceof File) {
            return true;
        }

        return false;
    }

    /**
    * Normalizes parameter values:
    * <ul>
    * <li>remove nils</li>
    * <li>keep files and arrays</li>
    * <li>format to string with `paramToString` for other cases</li>
    * </ul>
    * @param {Object.<String, Object>} params The parameters as object properties.
    * @returns {Object.<String, Object>} normalized parameters.
    */
    normalizeParams(params) {
        var newParams = {};
        for (var key in params) {
            if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {
                var value = params[key];
                if (this.isFileParam(value) || Array.isArray(value)) {
                    newParams[key] = value;
                } else {
                    newParams[key] = this.paramToString(value);
                }
            }
        }

        return newParams;
    }

    /**
    * Enumeration of collection format separator strategies.
    * @enum {String}
    * @readonly
    */
    static CollectionFormatEnum = {
        /**
         * Comma-separated values. Value: <code>csv</code>
         * @const
         */
        CSV: ',',

        /**
         * Space-separated values. Value: <code>ssv</code>
         * @const
         */
        SSV: ' ',

        /**
         * Tab-separated values. Value: <code>tsv</code>
         * @const
         */
        TSV: '\t',

        /**
         * Pipe(|)-separated values. Value: <code>pipes</code>
         * @const
         */
        PIPES: '|',

        /**
         * Native array. Value: <code>multi</code>
         * @const
         */
        MULTI: 'multi'
    };

    /**
    * Builds a string representation of an array-type actual parameter, according to the given collection format.
    * @param {Array} param An array parameter.
    * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.
    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns
    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.
    */
    buildCollectionParam(param, collectionFormat) {
        if (param == null) {
            return null;
        }
        switch (collectionFormat) {
            case 'csv':
                return param.map(this.paramToString).join(',');
            case 'ssv':
                return param.map(this.paramToString).join(' ');
            case 'tsv':
                return param.map(this.paramToString).join('\t');
            case 'pipes':
                return param.map(this.paramToString).join('|');
            case 'multi':
                //return the array directly as SuperAgent will handle it as expected
                return param.map(this.paramToString);
            default:
                throw new Error('Unknown collection format: ' + collectionFormat);
        }
    }

    /**
    * Applies authentication headers to the request.
    * @param {Object} request The request object created by a <code>superagent()</code> call.
    * @param {Array.<String>} authNames An array of authentication method names.
    */
    applyAuthToRequest(request, authNames) {
        authNames.forEach((authName) => {
            var auth = this.authentications[authName];
            switch (auth.type) {
                case 'basic':
                    if (auth.username || auth.password) {
                        request.auth(auth.username || '', auth.password || '');
                    }

                    break;
                case 'apiKey':
                    if (auth.apiKey) {
                        var data = {};
                        if (auth.apiKeyPrefix) {
                            data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;
                        } else {
                            data[auth.name] = auth.apiKey;
                        }

                        if (auth['in'] === 'header') {
                            request.set(data);
                        } else {
                            request.query(data);
                        }
                    }

                    break;
                case 'oauth2':
                    if (auth.accessToken) {
                        request.set({'Authorization': 'Bearer ' + auth.accessToken});
                    }

                    break;
                default:
                    throw new Error('Unknown authentication type: ' + auth.type);
            }
        });
    }

    /**
    * Deserializes an HTTP response body into a value of the specified type.
    * @param {Object} response A SuperAgent response object.
    * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types
    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
    * all properties on <code>data<code> will be converted to this type.
    * @returns A value of the specified type.
    */
    deserialize(response, returnType) {
        if (response == null || returnType == null || response.status == 204) {
            return null;
        }

        // Rely on SuperAgent for parsing response body.
        // See http://visionmedia.github.io/superagent/#parsing-response-bodies
        var data = response.body;
        if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {
            // SuperAgent does not always produce a body; use the unparsed response as a fallback
            data = response.text;
        }

        return ApiClient.convertToType(data, returnType);
    }

    

    /**
    * Invokes the REST service using the supplied settings and parameters.
    * @param {String} path The base URL to invoke.
    * @param {String} httpMethod The HTTP method to use.
    * @param {Object.<String, String>} pathParams A map of path parameters and their values.
    * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
    * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
    * @param {Object.<String, Object>} formParams A map of form parameters and their values.
    * @param {Object} bodyParam The value to pass as the request body.
    * @param {Array.<String>} authNames An array of authentication type names.
    * @param {Array.<String>} contentTypes An array of request MIME types.
    * @param {Array.<String>} accepts An array of acceptable response MIME types.
    * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the
    * constructor for a complex type.
    * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.
    */
    callApi(path, httpMethod, pathParams,
        queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,
        returnType) {

        var url = this.buildUrl(path, pathParams);
        var request = superagent__default['default'](httpMethod, url);

        // apply authentications
        this.applyAuthToRequest(request, authNames);

        // set query parameters
        if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {
            queryParams['_'] = new Date().getTime();
        }

        request.query(this.normalizeParams(queryParams));

        // set header parameters
        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));

        // set requestAgent if it is set by user
        if (this.requestAgent) {
          request.agent(this.requestAgent);
        }

        // set request timeout
        request.timeout(this.timeout);

        var contentType = this.jsonPreferredMime(contentTypes);
        if (contentType) {
            // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)
            if(contentType != 'multipart/form-data') {
                request.type(contentType);
            }
        } else if (!request.header['Content-Type']) {
            request.type('application/json');
        }

        if (contentType === 'application/x-www-form-urlencoded') {
            request.send(querystring__default['default'].stringify(this.normalizeParams(formParams)));
        } else if (contentType == 'multipart/form-data') {
            var _formParams = this.normalizeParams(formParams);
            for (var key in _formParams) {
                if (_formParams.hasOwnProperty(key)) {
                    if (this.isFileParam(_formParams[key])) {
                        // file field
                        request.attach(key, _formParams[key]);
                    } else {
                        request.field(key, _formParams[key]);
                    }
                }
            }
        } else if (bodyParam) {
            request.send(bodyParam);
        }

        var accept = this.jsonPreferredMime(accepts);
        if (accept) {
            request.accept(accept);
        }

        if (returnType === 'Blob') {
          request.responseType('blob');
        } else if (returnType === 'String') {
          request.responseType('string');
        }

        // Attach previously saved cookies, if enabled
        if (this.enableCookies){
            if (typeof window === 'undefined') {
                this.agent.attachCookies(request);
            }
            else {
                request.withCredentials();
            }
        }

        return new Promise((resolve, reject) => {
            request.end((error, response) => {
                if (error) {
                    reject(error);
                } else {
                    try {
                        var data = this.deserialize(response, returnType);
                        if (this.enableCookies && typeof window === 'undefined'){
                            this.agent.saveCookies(response);
                        }

                        resolve({data, response});
                    } catch (err) {
                        reject(err);
                    }
                }
            });
        });
        
    }

    /**
    * Parses an ISO-8601 string representation of a date value.
    * @param {String} str The date value as a string.
    * @returns {Date} The parsed date object.
    */
    static parseDate(str) {
        return new Date(str);
    }

    /**
    * Converts a value to the specified type.
    * @param {(String|Object)} data The data to convert, as a string or object.
    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types
    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
    * all properties on <code>data<code> will be converted to this type.
    * @returns An instance of the specified type or null or undefined if data is null or undefined.
    */
    static convertToType(data, type) {
        if (data === null || data === undefined)
            return data

        switch (type) {
            case 'Boolean':
                return Boolean(data);
            case 'Integer':
                return parseInt(data, 10);
            case 'Number':
                return parseFloat(data);
            case 'String':
                return String(data);
            case 'Date':
                return ApiClient.parseDate(String(data));
            case 'Blob':
                return data;
            default:
                if (type === Object) {
                    // generic object, return directly
                    return data;
                } else if (typeof type === 'function') {
                    // for model type like: User
                    return type.constructFromObject(data);
                } else if (Array.isArray(type)) {
                    // for array type like: ['String']
                    var itemType = type[0];

                    return data.map((item) => {
                        return ApiClient.convertToType(item, itemType);
                    });
                } else if (typeof type === 'object') {
                    // for plain object type like: {'String': 'Integer'}
                    var keyType, valueType;
                    for (var k in type) {
                        if (type.hasOwnProperty(k)) {
                            keyType = k;
                            valueType = type[k];
                            break;
                        }
                    }

                    var result = {};
                    for (var k in data) {
                        if (data.hasOwnProperty(k)) {
                            var key = ApiClient.convertToType(k, keyType);
                            var value = ApiClient.convertToType(data[k], valueType);
                            result[key] = value;
                        }
                    }

                    return result;
                } else {
                    // for unknown type, return the data directly
                    return data;
                }
        }
    }

    /**
    * Constructs a new map or array model from REST data.
    * @param data {Object|Array} The REST data.
    * @param obj {Object|Array} The target object or array.
    */
    static constructFromObject(data, obj, itemType) {
        if (Array.isArray(data)) {
            for (var i = 0; i < data.length; i++) {
                if (data.hasOwnProperty(i))
                    obj[i] = ApiClient.convertToType(data[i], itemType);
            }
        } else {
            for (var k in data) {
                if (data.hasOwnProperty(k))
                    obj[k] = ApiClient.convertToType(data[k], itemType);
            }
        }
    };
}

/**
* The default API client implementation.
* @type {module:ApiClient}
*/
ApiClient.instance = new ApiClient();

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The AccessToken model module.
* @module model/AccessToken
* @version 1.1.1-beta2
*/
class AccessToken {
    /**
    * Constructs a new <code>AccessToken</code>.
    * @alias module:model/AccessToken
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>AccessToken</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/AccessToken} obj Optional instance to populate.
    * @return {module:model/AccessToken} The populated <code>AccessToken</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccessToken();
                        
            
            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('refresh_token')) {
                obj['refresh_token'] = ApiClient.convertToType(data['refresh_token'], 'String');
            }
            if (data.hasOwnProperty('expires_in')) {
                obj['expires_in'] = ApiClient.convertToType(data['expires_in'], 'Number');
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'String');
            }
            if (data.hasOwnProperty('token_type')) {
                obj['token_type'] = ApiClient.convertToType(data['token_type'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {String} access_token
    */
    'access_token' = undefined;
    /**
    * @member {String} refresh_token
    */
    'refresh_token' = undefined;
    /**
    * @member {Number} expires_in
    */
    'expires_in' = undefined;
    /**
    * @member {String} expires_at
    */
    'expires_at' = undefined;
    /**
    * @member {module:model/AccessToken.TokenTypeEnum} token_type
    */
    'token_type' = undefined;



    /**
    * Allowed values for the <code>token_type</code> property.
    * @enum {String}
    * @readonly
    */
    static TokenTypeEnum = {
        /**
         * value: "Bearer"
         * @const
         */
        "Bearer": "Bearer"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The ActuateDeviceBody model module.
* @module model/ActuateDeviceBody
* @version 1.1.1-beta2
*/
class ActuateDeviceBody {
    /**
    * Constructs a new <code>ActuateDeviceBody</code>.
    * @alias module:model/ActuateDeviceBody
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>ActuateDeviceBody</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ActuateDeviceBody} obj Optional instance to populate.
    * @return {module:model/ActuateDeviceBody} The populated <code>ActuateDeviceBody</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActuateDeviceBody();
                        
            
            if (data.hasOwnProperty('property')) {
                obj['property'] = ApiClient.convertToType(data['property'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
    * the property to alter
    * @member {String} property
    */
    'property' = undefined;
    /**
    * the value to set for the property
    * @member {String} value
    */
    'value' = undefined;




}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The CreateTemperatureScheduleBody model module.
* @module model/CreateTemperatureScheduleBody
* @version 1.1.1-beta2
*/
class CreateTemperatureScheduleBody {
    /**
    * Constructs a new <code>CreateTemperatureScheduleBody</code>.
    * @alias module:model/CreateTemperatureScheduleBody
    * @class
    * @param device {String} 
    * @param temperatureDelta {Number} 
    * @param startTime {String} Time when the schedule should start in UTC.
    * @param endTime {String} Time when the schedule should end in UTC.
    * @param daysOfWeek {Array.<module:model/CreateTemperatureScheduleBody.DaysOfWeekEnum>} List of weekdays on which the schedule should run.
    */

    constructor(device, temperatureDelta, startTime, endTime, daysOfWeek) {
        
        
        this['device'] = device;
        this['temperatureDelta'] = temperatureDelta;
        this['startTime'] = startTime;
        this['endTime'] = endTime;
        this['daysOfWeek'] = daysOfWeek;
        
    }

    /**
    * Constructs a <code>CreateTemperatureScheduleBody</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/CreateTemperatureScheduleBody} obj Optional instance to populate.
    * @return {module:model/CreateTemperatureScheduleBody} The populated <code>CreateTemperatureScheduleBody</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateTemperatureScheduleBody();
                        
            
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('temperatureDelta')) {
                obj['temperatureDelta'] = ApiClient.convertToType(data['temperatureDelta'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('daysOfWeek')) {
                obj['daysOfWeek'] = ApiClient.convertToType(data['daysOfWeek'], ['String']);
            }
        }
        return obj;
    }

    /**
    * @member {String} device
    */
    'device' = undefined;
    /**
    * @member {Number} temperatureDelta
    */
    'temperatureDelta' = undefined;
    /**
    * Time when the schedule should start in UTC.
    * @member {String} startTime
    */
    'startTime' = undefined;
    /**
    * Time when the schedule should end in UTC.
    * @member {String} endTime
    */
    'endTime' = undefined;
    /**
    * List of weekdays on which the schedule should run.
    * @member {Array.<module:model/CreateTemperatureScheduleBody.DaysOfWeekEnum>} daysOfWeek
    */
    'daysOfWeek' = undefined;



    /**
    * Allowed values for the <code>daysOfWeek</code> property.
    * @enum {String}
    * @readonly
    */
    static DaysOfWeekEnum = {
        /**
         * value: "Monday"
         * @const
         */
        "Monday": "Monday",
        /**
         * value: "Tuesday"
         * @const
         */
        "Tuesday": "Tuesday",
        /**
         * value: "Wednesday"
         * @const
         */
        "Wednesday": "Wednesday",
        /**
         * value: "Thursday"
         * @const
         */
        "Thursday": "Thursday",
        /**
         * value: "Friday"
         * @const
         */
        "Friday": "Friday",
        /**
         * value: "Saturday"
         * @const
         */
        "Saturday": "Saturday",
        /**
         * value: "Sunday"
         * @const
         */
        "Sunday": "Sunday"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The CreateUserBody model module.
* @module model/CreateUserBody
* @version 1.1.1-beta2
*/
class CreateUserBody {
    /**
    * Constructs a new <code>CreateUserBody</code>.
    * @alias module:model/CreateUserBody
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>CreateUserBody</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/CreateUserBody} obj Optional instance to populate.
    * @return {module:model/CreateUserBody} The populated <code>CreateUserBody</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateUserBody();
                        
            
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {String} email
    */
    'email' = undefined;
    /**
    * @member {String} firstName
    */
    'firstName' = undefined;
    /**
    * @member {module:model/CreateUserBody.LanguageEnum} language
    */
    'language' = undefined;
    /**
    * @member {String} lastName
    */
    'lastName' = undefined;
    /**
    * @member {String} password
    */
    'password' = undefined;



    /**
    * Allowed values for the <code>language</code> property.
    * @enum {String}
    * @readonly
    */
    static LanguageEnum = {
        /**
         * value: "de"
         * @const
         */
        "de": "de",
        /**
         * value: "en"
         * @const
         */
        "en": "en"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
/**
* Enum class DeviceType.
* @enum {}
* @readonly
*/
class DeviceType {
        /**
         * value: "button"
         * @const
         */
        button = "button";

        /**
         * value: "contact"
         * @const
         */
        contact = "contact";

        /**
         * value: "motion"
         * @const
         */
        motion = "motion";

        /**
         * value: "lamp"
         * @const
         */
        lamp = "lamp";

        /**
         * value: "doorlock"
         * @const
         */
        doorlock = "doorlock";

        /**
         * value: "audio"
         * @const
         */
        audio = "audio";


    /**
    * Returns a <code>DeviceType</code> enum value from a Javascript object name.
    * @param {Object} data The plain JavaScript object containing the name of the enum value.
    * @return {module:model/DeviceType} The enum <code>DeviceType</code> value.
    */
    static constructFromObject(object) {
        return object;
    }
}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The DeviceTypeProperty model module.
* @module model/DeviceTypeProperty
* @version 1.1.1-beta2
*/
class DeviceTypeProperty {
    /**
    * Constructs a new <code>DeviceTypeProperty</code>.
    * @alias module:model/DeviceTypeProperty
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>DeviceTypeProperty</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/DeviceTypeProperty} obj Optional instance to populate.
    * @return {module:model/DeviceTypeProperty} The populated <code>DeviceTypeProperty</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceTypeProperty();
                        
            
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('enumValues')) {
                obj['enumValues'] = ApiClient.convertToType(data['enumValues'], ['String']);
            }
            if (data.hasOwnProperty('readable')) {
                obj['readable'] = ApiClient.convertToType(data['readable'], 'Boolean');
            }
            if (data.hasOwnProperty('writable')) {
                obj['writable'] = ApiClient.convertToType(data['writable'], 'Boolean');
            }
        }
        return obj;
    }

    /**
    * @member {module:model/DeviceTypeProperty.TypeEnum} type
    */
    'type' = undefined;
    /**
    * @member {String} name
    */
    'name' = undefined;
    /**
    * @member {String} unit
    */
    'unit' = undefined;
    /**
    * @member {Array.<String>} enumValues
    */
    'enumValues' = undefined;
    /**
    * @member {Boolean} readable
    */
    'readable' = undefined;
    /**
    * @member {Boolean} writable
    */
    'writable' = undefined;



    /**
    * Allowed values for the <code>type</code> property.
    * @enum {String}
    * @readonly
    */
    static TypeEnum = {
        /**
         * value: "Enum"
         * @const
         */
        "Enum": "Enum",
        /**
         * value: "Boolean"
         * @const
         */
        "Boolean": "Boolean",
        /**
         * value: "Number"
         * @const
         */
        "Number": "Number",
        /**
         * value: "String"
         * @const
         */
        "String": "String"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
/**
* Enum class Event.
* @enum {}
* @readonly
*/
class Event {
        /**
         * value: "click"
         * @const
         */
        click = "click";

        /**
         * value: "open"
         * @const
         */
        open = "open";

        /**
         * value: "close"
         * @const
         */
        close = "close";

        /**
         * value: "motion"
         * @const
         */
        motion = "motion";


    /**
    * Returns a <code>Event</code> enum value from a Javascript object name.
    * @param {Object} data The plain JavaScript object containing the name of the enum value.
    * @return {module:model/Event} The enum <code>Event</code> value.
    */
    static constructFromObject(object) {
        return object;
    }
}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The ExecuteActionButtonProjectBody model module.
* @module model/ExecuteActionButtonProjectBody
* @version 1.1.1-beta2
*/
class ExecuteActionButtonProjectBody {
    /**
    * Constructs a new <code>ExecuteActionButtonProjectBody</code>.
    * @alias module:model/ExecuteActionButtonProjectBody
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>ExecuteActionButtonProjectBody</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ExecuteActionButtonProjectBody} obj Optional instance to populate.
    * @return {module:model/ExecuteActionButtonProjectBody} The populated <code>ExecuteActionButtonProjectBody</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecuteActionButtonProjectBody();
                        
            
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
        }
        return obj;
    }

    /**
    * The event type can either be a single, double or long press. The toggle variations of this event are for the toggle button. If no event or an invalid event is passed, all events will triggered. 
    * @member {module:model/ExecuteActionButtonProjectBody.EventEnum} event
    */
    'event' = undefined;



    /**
    * Allowed values for the <code>event</code> property.
    * @enum {String}
    * @readonly
    */
    static EventEnum = {
        /**
         * value: "single press"
         * @const
         */
        "single press": "single press",
        /**
         * value: "double press"
         * @const
         */
        "double press": "double press",
        /**
         * value: "long press"
         * @const
         */
        "long press": "long press",
        /**
         * value: "single press toggle"
         * @const
         */
        "single press toggle": "single press toggle",
        /**
         * value: "double press toggle"
         * @const
         */
        "double press toggle": "double press toggle",
        /**
         * value: "long press toggle"
         * @const
         */
        "long press toggle": "long press toggle"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The GetDeviceEventSubscriptionsResponse model module.
* @module model/GetDeviceEventSubscriptionsResponse
* @version 1.1.1-beta2
*/
class GetDeviceEventSubscriptionsResponse {
    /**
    * Constructs a new <code>GetDeviceEventSubscriptionsResponse</code>.
    * @alias module:model/GetDeviceEventSubscriptionsResponse
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>GetDeviceEventSubscriptionsResponse</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GetDeviceEventSubscriptionsResponse} obj Optional instance to populate.
    * @return {module:model/GetDeviceEventSubscriptionsResponse} The populated <code>GetDeviceEventSubscriptionsResponse</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetDeviceEventSubscriptionsResponse();
                        
            
            if (data.hasOwnProperty('task')) {
                obj['task'] = ApiClient.convertToType(data['task'], 'Number');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
        }
        return obj;
    }

    /**
    * id of the task created for this attachement
    * @member {Number} task
    */
    'task' = undefined;
    /**
    * token of the user who the action will be called for
    * @member {String} token
    */
    'token' = undefined;
    /**
    * date of subscription
    * @member {String} createdAt
    */
    'createdAt' = undefined;




}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The GetDeviceTypesResponse model module.
* @module model/GetDeviceTypesResponse
* @version 1.1.1-beta2
*/
class GetDeviceTypesResponse {
    /**
    * Constructs a new <code>GetDeviceTypesResponse</code>.
    * @alias module:model/GetDeviceTypesResponse
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>GetDeviceTypesResponse</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GetDeviceTypesResponse} obj Optional instance to populate.
    * @return {module:model/GetDeviceTypesResponse} The populated <code>GetDeviceTypesResponse</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetDeviceTypesResponse();
                        
            
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [DeviceTypeProperty]);
            }
        }
        return obj;
    }

    /**
    * The types of this device, e.g. lamp, button,...
    * @member {Array.<String>} types
    */
    'types' = undefined;
    /**
    * The events supported by this device type
    * @member {String} events
    */
    'events' = undefined;
    /**
    * @member {Array.<module:model/DeviceTypeProperty>} properties
    */
    'properties' = undefined;




}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The GetDevicesSummaryResponse model module.
* @module model/GetDevicesSummaryResponse
* @version 1.1.1-beta2
*/
class GetDevicesSummaryResponse {
    /**
    * Constructs a new <code>GetDevicesSummaryResponse</code>.
    * @alias module:model/GetDevicesSummaryResponse
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>GetDevicesSummaryResponse</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GetDevicesSummaryResponse} obj Optional instance to populate.
    * @return {module:model/GetDevicesSummaryResponse} The populated <code>GetDevicesSummaryResponse</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetDevicesSummaryResponse();
                        
            
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], ['String']);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], ['String']);
            }
        }
        return obj;
    }

    /**
    * List of all types currently in use by the abstraction layer
    * @member {Array.<String>} types
    */
    'types' = undefined;
    /**
    * List of all currently used event names
    * @member {Array.<String>} events
    */
    'events' = undefined;
    /**
    * List of all currently used property names
    * @member {Array.<String>} properties
    */
    'properties' = undefined;




}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The ProviderInfoAuth model module.
* @module model/ProviderInfoAuth
* @version 1.1.1-beta2
*/
class ProviderInfoAuth {
    /**
    * Constructs a new <code>ProviderInfoAuth</code>.
    * @alias module:model/ProviderInfoAuth
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>ProviderInfoAuth</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ProviderInfoAuth} obj Optional instance to populate.
    * @return {module:model/ProviderInfoAuth} The populated <code>ProviderInfoAuth</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProviderInfoAuth();
                        
            
            if (data.hasOwnProperty('authType')) {
                obj['authType'] = ApiClient.convertToType(data['authType'], 'String');
            }
            if (data.hasOwnProperty('requiredFields')) {
                obj['requiredFields'] = ApiClient.convertToType(data['requiredFields'], Object);
            }
        }
        return obj;
    }

    /**
    * @member {String} authType
    */
    'authType' = undefined;
    /**
    * @member {Object} requiredFields
    */
    'requiredFields' = undefined;




}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The ProviderInfo model module.
* @module model/ProviderInfo
* @version 1.1.1-beta2
*/
class ProviderInfo {
    /**
    * Constructs a new <code>ProviderInfo</code>.
    * @alias module:model/ProviderInfo
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>ProviderInfo</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ProviderInfo} obj Optional instance to populate.
    * @return {module:model/ProviderInfo} The populated <code>ProviderInfo</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProviderInfo();
                        
            
            if (data.hasOwnProperty('auth')) {
                obj['auth'] = ProviderInfoAuth.constructFromObject(data['auth']);
            }
            if (data.hasOwnProperty('authHelper')) {
                obj['authHelper'] = ApiClient.convertToType(data['authHelper'], 'Boolean');
            }
            if (data.hasOwnProperty('b2bOnlyAuth')) {
                obj['b2bOnlyAuth'] = ApiClient.convertToType(data['b2bOnlyAuth'], 'Boolean');
            }
            if (data.hasOwnProperty('documentationUrl')) {
                obj['documentationUrl'] = ApiClient.convertToType(data['documentationUrl'], 'String');
            }
            if (data.hasOwnProperty('imageUrl')) {
                obj['imageUrl'] = ApiClient.convertToType(data['imageUrl'], 'String');
            }
            if (data.hasOwnProperty('logoUrl')) {
                obj['logoUrl'] = ApiClient.convertToType(data['logoUrl'], 'String');
            }
            if (data.hasOwnProperty('plugIconUrl')) {
                obj['plugIconUrl'] = ApiClient.convertToType(data['plugIconUrl'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {module:model/ProviderInfoAuth} auth
    */
    'auth' = undefined;
    /**
    * true iff a small tutorial for authorization code grant should be shown to the user 
    * @member {Boolean} authHelper
    */
    'authHelper' = undefined;
    /**
    * true iff this provider can only be authenticated by Conrad Connect Professional users 
    * @member {Boolean} b2bOnlyAuth
    */
    'b2bOnlyAuth' = undefined;
    /**
    * @member {String} documentationUrl
    */
    'documentationUrl' = undefined;
    /**
    * Big image that is used for both the provider cards and on the provider page. 
    * @member {String} imageUrl
    */
    'imageUrl' = undefined;
    /**
    * Small logo that is put on the card together with the big image. 
    * @member {String} logoUrl
    */
    'logoUrl' = undefined;
    /**
    * Default image for *plugs*, which are sensors and actuators in the project editor. 
    * @member {String} plugIconUrl
    */
    'plugIconUrl' = undefined;




}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The Provider model module.
* @module model/Provider
* @version 1.1.1-beta2
*/
class Provider {
    /**
    * Constructs a new <code>Provider</code>.
    * @alias module:model/Provider
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>Provider</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Provider} obj Optional instance to populate.
    * @return {module:model/Provider} The populated <code>Provider</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Provider();
                        
            
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = ProviderInfo.constructFromObject(data['info']);
            }
            if (data.hasOwnProperty('isAuthenticated')) {
                obj['isAuthenticated'] = ApiClient.convertToType(data['isAuthenticated'], 'Boolean');
            }
            if (data.hasOwnProperty('isB2B')) {
                obj['isB2B'] = ApiClient.convertToType(data['isB2B'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('prettyName')) {
                obj['prettyName'] = ApiClient.convertToType(data['prettyName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
    * Internal name of the provider
    * @member {String} id
    */
    'id' = undefined;
    /**
    * @member {module:model/Provider.ObjectEnum} object
    */
    'object' = undefined;
    /**
    * @member {module:model/ProviderInfo} info
    */
    'info' = undefined;
    /**
    * true iff the user is authenticated with this provider
    * @member {Boolean} isAuthenticated
    */
    'isAuthenticated' = undefined;
    /**
    * true iff this provider is relevant for Conrad Connect Professional
    * @member {Boolean} isB2B
    */
    'isB2B' = undefined;
    /**
    * Internal name of the provider (same as id)
    * @member {String} name
    */
    'name' = undefined;
    /**
    * Provider name that can be displayed to the user
    * @member {String} prettyName
    */
    'prettyName' = undefined;
    /**
    * A provider of type *device* offers connection to physical devices. A provider of type *service* offers virtual devices like access to APIs. 
    * @member {module:model/Provider.TypeEnum} type
    */
    'type' = undefined;



    /**
    * Allowed values for the <code>object</code> property.
    * @enum {String}
    * @readonly
    */
    static ObjectEnum = {
        /**
         * value: "provider"
         * @const
         */
        "provider": "provider"    };
    /**
    * Allowed values for the <code>type</code> property.
    * @enum {String}
    * @readonly
    */
    static TypeEnum = {
        /**
         * value: "device"
         * @const
         */
        "device": "device",
        /**
         * value: "service"
         * @const
         */
        "service": "service"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The GetProvidersListResponse model module.
* @module model/GetProvidersListResponse
* @version 1.1.1-beta2
*/
class GetProvidersListResponse {
    /**
    * Constructs a new <code>GetProvidersListResponse</code>.
    * @alias module:model/GetProvidersListResponse
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>GetProvidersListResponse</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GetProvidersListResponse} obj Optional instance to populate.
    * @return {module:model/GetProvidersListResponse} The populated <code>GetProvidersListResponse</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetProvidersListResponse();
                        
            
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [Provider]);
            }
        }
        return obj;
    }

    /**
    * @member {module:model/GetProvidersListResponse.ObjectEnum} object
    */
    'object' = undefined;
    /**
    * @member {Array.<module:model/Provider>} data
    */
    'data' = undefined;



    /**
    * Allowed values for the <code>object</code> property.
    * @enum {String}
    * @readonly
    */
    static ObjectEnum = {
        /**
         * value: "list"
         * @const
         */
        "list": "list"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The UserStatistic model module.
* @module model/UserStatistic
* @version 1.1.1-beta2
*/
class UserStatistic {
    /**
    * Constructs a new <code>UserStatistic</code>.
    * @alias module:model/UserStatistic
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>UserStatistic</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/UserStatistic} obj Optional instance to populate.
    * @return {module:model/UserStatistic} The populated <code>UserStatistic</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserStatistic();
                        
            
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('connectedDevices')) {
                obj['connectedDevices'] = ApiClient.convertToType(data['connectedDevices'], Object);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Number');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
    * user's account id, 12 byte BSON string
    * @member {String} account
    */
    'account' = undefined;
    /**
    * map of key-value pairs with provider as key and number of connected devices as value
    * @member {Object} connectedDevices
    */
    'connectedDevices' = undefined;
    /**
    * seconds-based unix timestamp
    * @member {Number} createdAt
    */
    'createdAt' = undefined;
    /**
    * @member {module:model/UserStatistic.ObjectEnum} object
    */
    'object' = undefined;
    /**
    * user's id, 12 byte BSON string
    * @member {String} user
    */
    'user' = undefined;



    /**
    * Allowed values for the <code>object</code> property.
    * @enum {String}
    * @readonly
    */
    static ObjectEnum = {
        /**
         * value: "user-statistic"
         * @const
         */
        "statistic": "user-statistic"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The GetStatsResponse model module.
* @module model/GetStatsResponse
* @version 1.1.1-beta2
*/
class GetStatsResponse {
    /**
    * Constructs a new <code>GetStatsResponse</code>.
    * @alias module:model/GetStatsResponse
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>GetStatsResponse</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GetStatsResponse} obj Optional instance to populate.
    * @return {module:model/GetStatsResponse} The populated <code>GetStatsResponse</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetStatsResponse();
                        
            
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [UserStatistic]);
            }
        }
        return obj;
    }

    /**
    * @member {module:model/GetStatsResponse.ObjectEnum} object
    */
    'object' = undefined;
    /**
    * @member {Array.<module:model/UserStatistic>} data
    */
    'data' = undefined;



    /**
    * Allowed values for the <code>object</code> property.
    * @enum {String}
    * @readonly
    */
    static ObjectEnum = {
        /**
         * value: "list"
         * @const
         */
        "list": "list"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The TemperatureSchedule model module.
* @module model/TemperatureSchedule
* @version 1.1.1-beta2
*/
class TemperatureSchedule {
    /**
    * Constructs a new <code>TemperatureSchedule</code>.
    * @alias module:model/TemperatureSchedule
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>TemperatureSchedule</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/TemperatureSchedule} obj Optional instance to populate.
    * @return {module:model/TemperatureSchedule} The populated <code>TemperatureSchedule</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemperatureSchedule();
                        
            
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Number');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isRunning')) {
                obj['isRunning'] = ApiClient.convertToType(data['isRunning'], 'Boolean');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('temperatureDelta')) {
                obj['temperatureDelta'] = ApiClient.convertToType(data['temperatureDelta'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
    * Seconds-based unix timestamp.
    * @member {Number} createdAt
    */
    'createdAt' = undefined;
    /**
    * ID of the device which this schedule controls.
    * @member {String} device
    */
    'device' = undefined;
    /**
    * The time of day to end the schedule, in UTC 24 hour time, HH:mm format. If the end time is before the start time (e.g. startTime = \"20:00\" and endTime = \"04:00\"), the endTime is interpreted as 'tomorrow' with respect to the startTime's 'today'.
    * @member {String} endTime
    */
    'endTime' = undefined;
    /**
    * 12 byte BSON string.
    * @member {String} id
    */
    'id' = undefined;
    /**
    * true if the schedule is applied at the moment of request, false otherwise.
    * @member {Boolean} isRunning
    */
    'isRunning' = undefined;
    /**
    * @member {module:model/TemperatureSchedule.ObjectEnum} object
    */
    'object' = undefined;
    /**
    * The time of day to start the schedule, in UTC 24 hour time, HH:mm format. If the start time is after the end time (e.g. startTime = \"20:00\" and endTime = \"04:00\"), the endTime is interpreted as 'tomorrow' with respect to the startTime's 'today'.
    * @member {String} startTime
    */
    'startTime' = undefined;
    /**
    * Amount of change (in degrees celcius) to apply to the device when the schedule is activated
    * @member {Number} temperatureDelta
    */
    'temperatureDelta' = undefined;
    /**
    * ID of the user who owns the schedule
    * @member {String} user
    */
    'user' = undefined;



    /**
    * Allowed values for the <code>object</code> property.
    * @enum {String}
    * @readonly
    */
    static ObjectEnum = {
        /**
         * value: "schedule"
         * @const
         */
        "schedule": "schedule"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The GetTemperatureSchedulesResponse model module.
* @module model/GetTemperatureSchedulesResponse
* @version 1.1.1-beta2
*/
class GetTemperatureSchedulesResponse {
    /**
    * Constructs a new <code>GetTemperatureSchedulesResponse</code>.
    * @alias module:model/GetTemperatureSchedulesResponse
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>GetTemperatureSchedulesResponse</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GetTemperatureSchedulesResponse} obj Optional instance to populate.
    * @return {module:model/GetTemperatureSchedulesResponse} The populated <code>GetTemperatureSchedulesResponse</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetTemperatureSchedulesResponse();
                        
            
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [TemperatureSchedule]);
            }
        }
        return obj;
    }

    /**
    * @member {module:model/GetTemperatureSchedulesResponse.ObjectEnum} object
    */
    'object' = undefined;
    /**
    * @member {Array.<module:model/TemperatureSchedule>} data
    */
    'data' = undefined;



    /**
    * Allowed values for the <code>object</code> property.
    * @enum {String}
    * @readonly
    */
    static ObjectEnum = {
        /**
         * value: "list"
         * @const
         */
        "list": "list"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The User model module.
* @module model/User
* @version 1.1.1-beta2
*/
class User {
    /**
    * Constructs a new <code>User</code>.
    * @alias module:model/User
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/User} obj Optional instance to populate.
    * @return {module:model/User} The populated <code>User</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();
                        
            
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
        }
        return obj;
    }

    /**
    * 12 byte BSON string
    * @member {String} id
    */
    'id' = undefined;
    /**
    * @member {module:model/User.ObjectEnum} object
    */
    'object' = undefined;
    /**
    * seconds-based unix timestamp
    * @member {Number} createdAt
    */
    'createdAt' = undefined;
    /**
    * @member {String} email
    */
    'email' = undefined;
    /**
    * @member {String} firstName
    */
    'firstName' = undefined;
    /**
    * @member {String} language
    */
    'language' = undefined;
    /**
    * @member {String} lastName
    */
    'lastName' = undefined;



    /**
    * Allowed values for the <code>object</code> property.
    * @enum {String}
    * @readonly
    */
    static ObjectEnum = {
        /**
         * value: "user"
         * @const
         */
        "user": "user"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The GetUsersResponse model module.
* @module model/GetUsersResponse
* @version 1.1.1-beta2
*/
class GetUsersResponse {
    /**
    * Constructs a new <code>GetUsersResponse</code>.
    * @alias module:model/GetUsersResponse
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>GetUsersResponse</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GetUsersResponse} obj Optional instance to populate.
    * @return {module:model/GetUsersResponse} The populated <code>GetUsersResponse</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetUsersResponse();
                        
            
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [User]);
            }
        }
        return obj;
    }

    /**
    * @member {module:model/GetUsersResponse.ObjectEnum} object
    */
    'object' = undefined;
    /**
    * @member {Array.<module:model/User>} data
    */
    'data' = undefined;



    /**
    * Allowed values for the <code>object</code> property.
    * @enum {String}
    * @readonly
    */
    static ObjectEnum = {
        /**
         * value: "list"
         * @const
         */
        "list": "list"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The InvalidParameterError model module.
* @module model/InvalidParameterError
* @version 1.1.1-beta2
*/
class InvalidParameterError {
    /**
    * Constructs a new <code>InvalidParameterError</code>.
    * @alias module:model/InvalidParameterError
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>InvalidParameterError</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/InvalidParameterError} obj Optional instance to populate.
    * @return {module:model/InvalidParameterError} The populated <code>InvalidParameterError</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvalidParameterError();
                        
            
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('parameter')) {
                obj['parameter'] = ApiClient.convertToType(data['parameter'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {Number} statusCode
    */
    'statusCode' = undefined;
    /**
    * @member {String} code
    */
    'code' = undefined;
    /**
    * @member {String} message
    */
    'message' = undefined;
    /**
    * @member {String} parameter
    */
    'parameter' = undefined;




}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The Project model module.
* @module model/Project
* @version 1.1.1-beta2
*/
class Project {
    /**
    * Constructs a new <code>Project</code>.
    * @alias module:model/Project
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>Project</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Project} obj Optional instance to populate.
    * @return {module:model/Project} The populated <code>Project</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Project();
                        
            
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
    * 12 byte BSON string
    * @member {String} id
    */
    'id' = undefined;
    /**
    * @member {module:model/Project.ObjectEnum} object
    */
    'object' = undefined;
    /**
    * seconds-based unix timestamp
    * @member {Number} createdAt
    */
    'createdAt' = undefined;
    /**
    * @member {String} name
    */
    'name' = undefined;



    /**
    * Allowed values for the <code>object</code> property.
    * @enum {String}
    * @readonly
    */
    static ObjectEnum = {
        /**
         * value: "project"
         * @const
         */
        "project": "project"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The ListActionButtonProjectsResponse model module.
* @module model/ListActionButtonProjectsResponse
* @version 1.1.1-beta2
*/
class ListActionButtonProjectsResponse {
    /**
    * Constructs a new <code>ListActionButtonProjectsResponse</code>.
    * @alias module:model/ListActionButtonProjectsResponse
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>ListActionButtonProjectsResponse</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ListActionButtonProjectsResponse} obj Optional instance to populate.
    * @return {module:model/ListActionButtonProjectsResponse} The populated <code>ListActionButtonProjectsResponse</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListActionButtonProjectsResponse();
                        
            
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [Project]);
            }
        }
        return obj;
    }

    /**
    * @member {module:model/ListActionButtonProjectsResponse.ObjectEnum} object
    */
    'object' = undefined;
    /**
    * @member {Array.<module:model/Project>} data
    */
    'data' = undefined;



    /**
    * Allowed values for the <code>object</code> property.
    * @enum {String}
    * @readonly
    */
    static ObjectEnum = {
        /**
         * value: "list"
         * @const
         */
        "list": "list"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The NotFoundError model module.
* @module model/NotFoundError
* @version 1.1.1-beta2
*/
class NotFoundError {
    /**
    * Constructs a new <code>NotFoundError</code>.
    * @alias module:model/NotFoundError
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>NotFoundError</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/NotFoundError} obj Optional instance to populate.
    * @return {module:model/NotFoundError} The populated <code>NotFoundError</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotFoundError();
                        
            
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {Number} statusCode
    */
    'statusCode' = undefined;
    /**
    * @member {String} code
    */
    'code' = undefined;
    /**
    * @member {String} message
    */
    'message' = undefined;




}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The OAuthError model module.
* @module model/OAuthError
* @version 1.1.1-beta2
*/
class OAuthError {
    /**
    * Constructs a new <code>OAuthError</code>.
    * @alias module:model/OAuthError
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>OAuthError</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/OAuthError} obj Optional instance to populate.
    * @return {module:model/OAuthError} The populated <code>OAuthError</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OAuthError();
                        
            
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('error_description')) {
                obj['error_description'] = ApiClient.convertToType(data['error_description'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {String} error
    */
    'error' = undefined;
    /**
    * @member {String} error_description
    */
    'error_description' = undefined;




}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The PostOauthPasswordBody model module.
* @module model/PostOauthPasswordBody
* @version 1.1.1-beta2
*/
class PostOauthPasswordBody {
    /**
    * Constructs a new <code>PostOauthPasswordBody</code>.
    * @alias module:model/PostOauthPasswordBody
    * @class
    * @param grantType {module:model/PostOauthPasswordBody.GrantTypeEnum} 
    * @param username {String} 
    * @param password {String} 
    */

    constructor(grantType, username, password) {
        
        
        this['grant_type'] = grantType;
        this['username'] = username;
        this['password'] = password;
        
    }

    /**
    * Constructs a <code>PostOauthPasswordBody</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PostOauthPasswordBody} obj Optional instance to populate.
    * @return {module:model/PostOauthPasswordBody} The populated <code>PostOauthPasswordBody</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostOauthPasswordBody();
                        
            
            if (data.hasOwnProperty('grant_type')) {
                obj['grant_type'] = ApiClient.convertToType(data['grant_type'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {module:model/PostOauthPasswordBody.GrantTypeEnum} grant_type
    */
    'grant_type' = undefined;
    /**
    * @member {String} username
    */
    'username' = undefined;
    /**
    * @member {String} password
    */
    'password' = undefined;



    /**
    * Allowed values for the <code>grant_type</code> property.
    * @enum {String}
    * @readonly
    */
    static GrantTypeEnum = {
        /**
         * value: "password"
         * @const
         */
        "password": "password"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The PostOauthRefreshBody model module.
* @module model/PostOauthRefreshBody
* @version 1.1.1-beta2
*/
class PostOauthRefreshBody {
    /**
    * Constructs a new <code>PostOauthRefreshBody</code>.
    * @alias module:model/PostOauthRefreshBody
    * @class
    * @param grantType {module:model/PostOauthRefreshBody.GrantTypeEnum} 
    */

    constructor(grantType) {
        
        
        this['grant_type'] = grantType;
        
    }

    /**
    * Constructs a <code>PostOauthRefreshBody</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PostOauthRefreshBody} obj Optional instance to populate.
    * @return {module:model/PostOauthRefreshBody} The populated <code>PostOauthRefreshBody</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostOauthRefreshBody();
                        
            
            if (data.hasOwnProperty('grant_type')) {
                obj['grant_type'] = ApiClient.convertToType(data['grant_type'], 'String');
            }
            if (data.hasOwnProperty('refresh_token')) {
                obj['refresh_token'] = ApiClient.convertToType(data['refresh_token'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {module:model/PostOauthRefreshBody.GrantTypeEnum} grant_type
    */
    'grant_type' = undefined;
    /**
    * @member {String} refresh_token
    */
    'refresh_token' = undefined;



    /**
    * Allowed values for the <code>grant_type</code> property.
    * @enum {String}
    * @readonly
    */
    static GrantTypeEnum = {
        /**
         * value: "refresh_token"
         * @const
         */
        "token": "refresh_token"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
/**
* Enum class Property.
* @enum {}
* @readonly
*/
class Property {
        /**
         * value: "on_off"
         * @const
         */
        on_off = "on_off";

        /**
         * value: "brightness"
         * @const
         */
        brightness = "brightness";

        /**
         * value: "color"
         * @const
         */
        color = "color";

        /**
         * value: "open"
         * @const
         */
        open = "open";

        /**
         * value: "closed"
         * @const
         */
        closed = "closed";


    /**
    * Returns a <code>Property</code> enum value from a Javascript object name.
    * @param {Object} data The plain JavaScript object containing the name of the enum value.
    * @return {module:model/Property} The enum <code>Property</code> value.
    */
    static constructFromObject(object) {
        return object;
    }
}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The SubscribeToDeviceEventBody model module.
* @module model/SubscribeToDeviceEventBody
* @version 1.1.1-beta2
*/
class SubscribeToDeviceEventBody {
    /**
    * Constructs a new <code>SubscribeToDeviceEventBody</code>.
    * @alias module:model/SubscribeToDeviceEventBody
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>SubscribeToDeviceEventBody</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SubscribeToDeviceEventBody} obj Optional instance to populate.
    * @return {module:model/SubscribeToDeviceEventBody} The populated <code>SubscribeToDeviceEventBody</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscribeToDeviceEventBody();
                        
            
            if (data.hasOwnProperty('triggers')) {
                obj['triggers'] = ApiClient.convertToType(data['triggers'], ['String']);
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('lt')) {
                obj['lt'] = ApiClient.convertToType(data['lt'], 'Number');
            }
            if (data.hasOwnProperty('gt')) {
                obj['gt'] = ApiClient.convertToType(data['gt'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
    * Event trigger of the device
    * @member {Array.<String>} triggers
    */
    'triggers' = undefined;
    /**
    * event to subscribe to (from GET /device)
    * @member {String} event
    */
    'event' = undefined;
    /**
    * token of the user who the action will be called for
    * @member {String} token
    */
    'token' = undefined;
    /**
    * The lower bound of an event that has a numeric number, if none set than Infinity/-Inifinity
    * @member {Number} lt
    */
    'lt' = undefined;
    /**
    * The lower bound of an event that has a numeric number, if none set than Infinity/-Inifinity
    * @member {Number} gt
    */
    'gt' = undefined;
    /**
    * The callback url which will receive the message each time the device triggers the event, if none set then will be sent to mydaco API.
    * @member {String} url
    */
    'url' = undefined;




}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The SubscribeToDeviceEventResponse model module.
* @module model/SubscribeToDeviceEventResponse
* @version 1.1.1-beta2
*/
class SubscribeToDeviceEventResponse {
    /**
    * Constructs a new <code>SubscribeToDeviceEventResponse</code>.
    * @alias module:model/SubscribeToDeviceEventResponse
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>SubscribeToDeviceEventResponse</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SubscribeToDeviceEventResponse} obj Optional instance to populate.
    * @return {module:model/SubscribeToDeviceEventResponse} The populated <code>SubscribeToDeviceEventResponse</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscribeToDeviceEventResponse();
                        
            
            if (data.hasOwnProperty('subscription')) {
                obj['subscription'] = ApiClient.convertToType(data['subscription'], 'Number');
            }
        }
        return obj;
    }

    /**
    * id of the subscription (created task)
    * @member {Number} subscription
    */
    'subscription' = undefined;




}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* The UpdateMeBody model module.
* @module model/UpdateMeBody
* @version 1.1.1-beta2
*/
class UpdateMeBody {
    /**
    * Constructs a new <code>UpdateMeBody</code>.
    * @alias module:model/UpdateMeBody
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>UpdateMeBody</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/UpdateMeBody} obj Optional instance to populate.
    * @return {module:model/UpdateMeBody} The populated <code>UpdateMeBody</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateMeBody();
                        
            
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
        }
        return obj;
    }

    /**
    * @member {String} firstName
    */
    'firstName' = undefined;
    /**
    * @member {module:model/UpdateMeBody.LanguageEnum} language
    */
    'language' = undefined;
    /**
    * @member {String} lastName
    */
    'lastName' = undefined;
    /**
    * @member {String} password
    */
    'password' = undefined;



    /**
    * Allowed values for the <code>language</code> property.
    * @enum {String}
    * @readonly
    */
    static LanguageEnum = {
        /**
         * value: "de"
         * @const
         */
        "de": "de",
        /**
         * value: "en"
         * @const
         */
        "en": "en"    };

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* ActionButtonInteraction service.
* @module api/ActionButtonInteractionApi
* @version 1.1.1-beta2
*/
class ActionButtonInteractionApi {

    /**
    * Constructs a new ActionButtonInteractionApi. 
    * @alias module:api/ActionButtonInteractionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    executeActionButtonProjectWithHttpInfo(project, opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/abstraction/do/{project}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    executeActionButtonProject(project, opts) {
      return this.executeActionButtonProjectWithHttpInfo(project, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListActionButtonProjectsResponse} and HTTP response
     */
    listActionButtonProjectsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListActionButtonProjectsResponse;

      return this.apiClient.callApi(
        '/abstraction/do', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListActionButtonProjectsResponse}
     */
    listActionButtonProjects() {
      return this.listActionButtonProjectsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* DeviceInteraction service.
* @module api/DeviceInteractionApi
* @version 1.1.1-beta2
*/
class DeviceInteractionApi {

    /**
    * Constructs a new DeviceInteractionApi. 
    * @alias module:api/DeviceInteractionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Perform an action on a device
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    actuateDeviceWithHttpInfo(device, opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'device': device
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/abstraction/device/{device}/actuate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Perform an action on a device
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    actuateDevice(device, opts) {
      return this.actuateDeviceWithHttpInfo(device, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get historical data for a readable property of a device
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getDeviceDataForPropertyWithHttpInfo(device, property, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'device': device,
        'property': property
      };
      let queryParams = {
        'from': opts['from'],
        'until': opts['until'],
        'grouping': opts['grouping'],
        'aggregate': opts['aggregate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/abstraction/device/{device}/data/{property}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get historical data for a readable property of a device
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getDeviceDataForProperty(device, property, opts) {
      return this.getDeviceDataForPropertyWithHttpInfo(device, property, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of running subscriptions, started by the abstraction API
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GetDeviceEventSubscriptionsResponse>} and HTTP response
     */
    getDeviceEventSubscriptionsWithHttpInfo(token) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceEventSubscriptionsResponse];

      return this.apiClient.callApi(
        '/abstraction/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of running subscriptions, started by the abstraction API
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GetDeviceEventSubscriptionsResponse>}
     */
    getDeviceEventSubscriptions(token) {
      return this.getDeviceEventSubscriptionsWithHttpInfo(token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of supported device types
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GetDeviceTypesResponse>} and HTTP response
     */
    getDeviceTypesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceTypesResponse];

      return this.apiClient.callApi(
        '/abstraction/device-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of supported device types
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GetDeviceTypesResponse>}
     */
    getDeviceTypes() {
      return this.getDeviceTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the current state of the abstraction layer with complete list of all currently used types and property and event names. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GetDevicesSummaryResponse>} and HTTP response
     */
    getDevicesSummaryWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDevicesSummaryResponse];

      return this.apiClient.callApi(
        '/abstraction/list-all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the current state of the abstraction layer with complete list of all currently used types and property and event names. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GetDevicesSummaryResponse>}
     */
    getDevicesSummary() {
      return this.getDevicesSummaryWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the latest value for a readable property of a device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getLatestDeviceDataForPropertyWithHttpInfo(device, property) {
      let postBody = null;

      let pathParams = {
        'device': device,
        'property': property
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/abstraction/device/{device}/data/{property}/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the latest value for a readable property of a device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getLatestDeviceDataForProperty(device, property) {
      return this.getLatestDeviceDataForPropertyWithHttpInfo(device, property)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query devices of a user
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getUserDevicesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'types': this.apiClient.buildCollectionParam(opts['types'], 'multi'),
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'multi'),
        'events': this.apiClient.buildCollectionParam(opts['events'], 'multi'),
        'readableProperties': this.apiClient.buildCollectionParam(opts['readableProperties'], 'multi'),
        'writableProperties': this.apiClient.buildCollectionParam(opts['writableProperties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/abstraction/device', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Query devices of a user
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getUserDevices(opts) {
      return this.getUserDevicesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Subscribe to an event of a device
     * You provide a device id, an event, an optional callback url and a payload to be sent back. Every time the device (sensor) triggers the event, the callback url (or the default mydaco API) will receive a message. The response message contains the parameters token, device, event, value and task. Token, device and event are as specified in the event subscription.  The parameter value is reserved for events which provide some sensor data, for example thermostats would provide the current temperature. It&#x27;s currently not in use.  The mydaco API will also receive the id of the waylay task that includes the sensor plugs, which trigger this event. 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscribeToDeviceEventResponse} and HTTP response
     */
    subscribeToDeviceEventWithHttpInfo(device, opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'device': device
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscribeToDeviceEventResponse;

      return this.apiClient.callApi(
        '/abstraction/device/{device}/event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Subscribe to an event of a device
     * You provide a device id, an event, an optional callback url and a payload to be sent back. Every time the device (sensor) triggers the event, the callback url (or the default mydaco API) will receive a message. The response message contains the parameters token, device, event, value and task. Token, device and event are as specified in the event subscription.  The parameter value is reserved for events which provide some sensor data, for example thermostats would provide the current temperature. It&#x27;s currently not in use.  The mydaco API will also receive the id of the waylay task that includes the sensor plugs, which trigger this event. 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscribeToDeviceEventResponse}
     */
    subscribeToDeviceEvent(device, opts) {
      return this.subscribeToDeviceEventWithHttpInfo(device, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unsubscribes from an event
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    unsubscribeFromDeviceEventWithHttpInfo(subscription) {
      let postBody = null;

      let pathParams = {
        'subscription': subscription
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/abstraction/event/{subscription}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unsubscribes from an event
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    unsubscribeFromDeviceEvent(subscription) {
      return this.unsubscribeFromDeviceEventWithHttpInfo(subscription)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* OAuthEndpoints service.
* @module api/OAuthEndpointsApi
* @version 1.1.1-beta2
*/
class OAuthEndpointsApi {

    /**
    * Constructs a new OAuthEndpointsApi. 
    * @alias module:api/OAuthEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Exchange either a username and password for an access and refresh token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccessToken} and HTTP response
     */
    postOauthPasswordWithHttpInfo(grantType, username, password) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'grant_type': grantType,
        'username': username,
        'password': password
      };

      let authNames = ['httpBasicClientCredentials'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AccessToken;

      return this.apiClient.callApi(
        '/oauth/token#p', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Exchange either a username and password for an access and refresh token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccessToken}
     */
    postOauthPassword(grantType, username, password) {
      return this.postOauthPasswordWithHttpInfo(grantType, username, password)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Exchange either a refresh token for an access token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccessToken} and HTTP response
     */
    postOauthRefreshWithHttpInfo(grantType, refreshToken) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'grant_type': grantType,
        'refresh_token': refreshToken
      };

      let authNames = ['httpBasicClientCredentials'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AccessToken;

      return this.apiClient.callApi(
        '/oauth/token#r', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Exchange either a refresh token for an access token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccessToken}
     */
    postOauthRefresh(grantType, refreshToken) {
      return this.postOauthRefreshWithHttpInfo(grantType, refreshToken)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* ProviderAuthenticationManagement service.
* @module api/ProviderAuthenticationManagementApi
* @version 1.1.1-beta2
*/
class ProviderAuthenticationManagementApi {

    /**
    * Constructs a new ProviderAuthenticationManagementApi. 
    * @alias module:api/ProviderAuthenticationManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    connectProviderWithHttpInfo(provider, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
        'redirect_uri': opts['redirectUri']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/providers/{provider}/connect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    connectProvider(provider, opts) {
      return this.connectProviderWithHttpInfo(provider, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Disconnect the provider by removing all authentication information like access tokens, refresh tokens and stored passwords. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    disconnectProviderWithHttpInfo(provider) {
      let postBody = null;

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/providers/{provider}/disconnect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Disconnect the provider by removing all authentication information like access tokens, refresh tokens and stored passwords. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    disconnectProvider(provider) {
      return this.disconnectProviderWithHttpInfo(provider)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Similar to *_/disconnect*, but also deletes all stored data like device names and metric values. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    disconnectProviderAndDeleteDataWithHttpInfo(provider) {
      let postBody = null;

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/providers/{provider}/disconnect-and-delete-data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Similar to *_/disconnect*, but also deletes all stored data like device names and metric values. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    disconnectProviderAndDeleteData(provider) {
      return this.disconnectProviderAndDeleteDataWithHttpInfo(provider)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProvidersListResponse} and HTTP response
     */
    getProvidersListWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProvidersListResponse;

      return this.apiClient.callApi(
        '/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProvidersListResponse}
     */
    getProvidersList() {
      return this.getProvidersListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    refreshProviderWithHttpInfo(provider) {
      let postBody = null;

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/providers/{provider}/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    refreshProvider(provider) {
      return this.refreshProviderWithHttpInfo(provider)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* TemperatureSchedules service.
* @module api/TemperatureSchedulesApi
* @version 1.1.1-beta2
*/
class TemperatureSchedulesApi {

    /**
    * Constructs a new TemperatureSchedulesApi. 
    * @alias module:api/TemperatureSchedulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a temperature schedule
     * Create a new temperature schedule for the authenticated user. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemperatureSchedule} and HTTP response
     */
    createTemperatureScheduleWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemperatureSchedule;

      return this.apiClient.callApi(
        '/temperature-schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a temperature schedule
     * Create a new temperature schedule for the authenticated user. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemperatureSchedule}
     */
    createTemperatureSchedule(body) {
      return this.createTemperatureScheduleWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a temperature schedule by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTemperatureScheduleWithHttpInfo(schedule) {
      let postBody = null;

      let pathParams = {
        'schedule': schedule
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/temperature-schedules/{schedule}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a temperature schedule by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTemperatureSchedule(schedule) {
      return this.deleteTemperatureScheduleWithHttpInfo(schedule)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a temperature schedule by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemperatureSchedule} and HTTP response
     */
    getTemperatureScheduleWithHttpInfo(schedule) {
      let postBody = null;

      let pathParams = {
        'schedule': schedule
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemperatureSchedule;

      return this.apiClient.callApi(
        '/temperature-schedules/{schedule}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a temperature schedule by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemperatureSchedule}
     */
    getTemperatureSchedule(schedule) {
      return this.getTemperatureScheduleWithHttpInfo(schedule)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of temperature schedules
     * Get a list of temperature schedules for the authenticated user. Optionally filter by a device id. 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTemperatureSchedulesResponse} and HTTP response
     */
    getTemperatureSchedulesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'device': opts['device']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTemperatureSchedulesResponse;

      return this.apiClient.callApi(
        '/temperature-schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of temperature schedules
     * Get a list of temperature schedules for the authenticated user. Optionally filter by a device id. 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTemperatureSchedulesResponse}
     */
    getTemperatureSchedules(opts) {
      return this.getTemperatureSchedulesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* UserManagement service.
* @module api/UserManagementApi
* @version 1.1.1-beta2
*/
class UserManagementApi {

    /**
    * Constructs a new UserManagementApi. 
    * @alias module:api/UserManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new user
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    createUserWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasicClientCredentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new user
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    createUser(opts) {
      return this.createUserWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete authenticated user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteMeWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/me', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete authenticated user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteMe() {
      return this.deleteMeWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get authenticated user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    getMeWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get authenticated user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    getMe() {
      return this.getMeWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the list of accessible users
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetUsersResponse} and HTTP response
     */
    getUsersWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasicClientCredentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUsersResponse;

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the list of accessible users
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetUsersResponse}
     */
    getUsers() {
      return this.getUsersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update authenticated user
     * Send any subset of valid properties to update. On success this endpoint will return the updated user object. 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    updateMeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/me', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update authenticated user
     * Send any subset of valid properties to update. On success this endpoint will return the updated user object. 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    updateMe(opts) {
      return this.updateMeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}

/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

/**
* UserStatistics service.
* @module api/UserStatisticsApi
* @version 1.1.1-beta2
*/
class UserStatisticsApi {

    /**
    * Constructs a new UserStatisticsApi. 
    * @alias module:api/UserStatisticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get the list of users with devices and the number of devices per provider
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetStatsResponse} and HTTP response
     */
    getStatsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasicClientCredentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStatsResponse;

      return this.apiClient.callApi(
        '/stats/users-with-devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the list of users with devices and the number of devices per provider
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetStatsResponse}
     */
    getStats() {
      return this.getStatsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}

exports.AccessToken = AccessToken;
exports.ActionButtonInteractionApi = ActionButtonInteractionApi;
exports.ActuateDeviceBody = ActuateDeviceBody;
exports.ApiClient = ApiClient;
exports.CreateTemperatureScheduleBody = CreateTemperatureScheduleBody;
exports.CreateUserBody = CreateUserBody;
exports.DeviceInteractionApi = DeviceInteractionApi;
exports.DeviceType = DeviceType;
exports.DeviceTypeProperty = DeviceTypeProperty;
exports.Event = Event;
exports.ExecuteActionButtonProjectBody = ExecuteActionButtonProjectBody;
exports.GetDeviceEventSubscriptionsResponse = GetDeviceEventSubscriptionsResponse;
exports.GetDeviceTypesResponse = GetDeviceTypesResponse;
exports.GetDevicesSummaryResponse = GetDevicesSummaryResponse;
exports.GetProvidersListResponse = GetProvidersListResponse;
exports.GetStatsResponse = GetStatsResponse;
exports.GetTemperatureSchedulesResponse = GetTemperatureSchedulesResponse;
exports.GetUsersResponse = GetUsersResponse;
exports.InvalidParameterError = InvalidParameterError;
exports.ListActionButtonProjectsResponse = ListActionButtonProjectsResponse;
exports.NotFoundError = NotFoundError;
exports.OAuthEndpointsApi = OAuthEndpointsApi;
exports.OAuthError = OAuthError;
exports.PostOauthPasswordBody = PostOauthPasswordBody;
exports.PostOauthRefreshBody = PostOauthRefreshBody;
exports.Project = Project;
exports.Property = Property;
exports.Provider = Provider;
exports.ProviderAuthenticationManagementApi = ProviderAuthenticationManagementApi;
exports.ProviderInfo = ProviderInfo;
exports.ProviderInfoAuth = ProviderInfoAuth;
exports.SubscribeToDeviceEventBody = SubscribeToDeviceEventBody;
exports.SubscribeToDeviceEventResponse = SubscribeToDeviceEventResponse;
exports.TemperatureSchedule = TemperatureSchedule;
exports.TemperatureSchedulesApi = TemperatureSchedulesApi;
exports.UpdateMeBody = UpdateMeBody;
exports.User = User;
exports.UserManagementApi = UserManagementApi;
exports.UserStatistic = UserStatistic;
exports.UserStatisticsApi = UserStatisticsApi;
