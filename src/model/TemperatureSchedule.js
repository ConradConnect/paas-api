/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The TemperatureSchedule model module.
* @module model/TemperatureSchedule
* @version 1.1.1-beta2
*/
export default class TemperatureSchedule {
    /**
    * Constructs a new <code>TemperatureSchedule</code>.
    * @alias module:model/TemperatureSchedule
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>TemperatureSchedule</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/TemperatureSchedule} obj Optional instance to populate.
    * @return {module:model/TemperatureSchedule} The populated <code>TemperatureSchedule</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemperatureSchedule();
                        
            
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Number');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isRunning')) {
                obj['isRunning'] = ApiClient.convertToType(data['isRunning'], 'Boolean');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('temperatureDelta')) {
                obj['temperatureDelta'] = ApiClient.convertToType(data['temperatureDelta'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
    * Seconds-based unix timestamp.
    * @member {Number} createdAt
    */
    'createdAt' = undefined;
    /**
    * ID of the device which this schedule controls.
    * @member {String} device
    */
    'device' = undefined;
    /**
    * The time of day to end the schedule, in UTC 24 hour time, HH:mm format. If the end time is before the start time (e.g. startTime = \"20:00\" and endTime = \"04:00\"), the endTime is interpreted as 'tomorrow' with respect to the startTime's 'today'.
    * @member {String} endTime
    */
    'endTime' = undefined;
    /**
    * 12 byte BSON string.
    * @member {String} id
    */
    'id' = undefined;
    /**
    * true if the schedule is applied at the moment of request, false otherwise.
    * @member {Boolean} isRunning
    */
    'isRunning' = undefined;
    /**
    * @member {module:model/TemperatureSchedule.ObjectEnum} object
    */
    'object' = undefined;
    /**
    * The time of day to start the schedule, in UTC 24 hour time, HH:mm format. If the start time is after the end time (e.g. startTime = \"20:00\" and endTime = \"04:00\"), the endTime is interpreted as 'tomorrow' with respect to the startTime's 'today'.
    * @member {String} startTime
    */
    'startTime' = undefined;
    /**
    * Amount of change (in degrees celcius) to apply to the device when the schedule is activated
    * @member {Number} temperatureDelta
    */
    'temperatureDelta' = undefined;
    /**
    * ID of the user who owns the schedule
    * @member {String} user
    */
    'user' = undefined;



    /**
    * Allowed values for the <code>object</code> property.
    * @enum {String}
    * @readonly
    */
    static ObjectEnum = {
        /**
         * value: "schedule"
         * @const
         */
        "schedule": "schedule"    };

}
