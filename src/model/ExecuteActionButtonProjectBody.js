/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The ExecuteActionButtonProjectBody model module.
* @module model/ExecuteActionButtonProjectBody
* @version 1.1.1-beta2
*/
export default class ExecuteActionButtonProjectBody {
    /**
    * Constructs a new <code>ExecuteActionButtonProjectBody</code>.
    * @alias module:model/ExecuteActionButtonProjectBody
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>ExecuteActionButtonProjectBody</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ExecuteActionButtonProjectBody} obj Optional instance to populate.
    * @return {module:model/ExecuteActionButtonProjectBody} The populated <code>ExecuteActionButtonProjectBody</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecuteActionButtonProjectBody();
                        
            
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
        }
        return obj;
    }

    /**
    * The event type can either be a single, double or long press. The toggle variations of this event are for the toggle button. If no event or an invalid event is passed, all events will triggered. 
    * @member {module:model/ExecuteActionButtonProjectBody.EventEnum} event
    */
    'event' = undefined;



    /**
    * Allowed values for the <code>event</code> property.
    * @enum {String}
    * @readonly
    */
    static EventEnum = {
        /**
         * value: "single press"
         * @const
         */
        "single press": "single press",
        /**
         * value: "double press"
         * @const
         */
        "double press": "double press",
        /**
         * value: "long press"
         * @const
         */
        "long press": "long press",
        /**
         * value: "single press toggle"
         * @const
         */
        "single press toggle": "single press toggle",
        /**
         * value: "double press toggle"
         * @const
         */
        "double press toggle": "double press toggle",
        /**
         * value: "long press toggle"
         * @const
         */
        "long press toggle": "long press toggle"    };

}
