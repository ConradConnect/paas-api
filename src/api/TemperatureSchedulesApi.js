/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CreateTemperatureScheduleBody from '../model/CreateTemperatureScheduleBody';
import GetTemperatureSchedulesResponse from '../model/GetTemperatureSchedulesResponse';
import TemperatureSchedule from '../model/TemperatureSchedule';

/**
* TemperatureSchedules service.
* @module api/TemperatureSchedulesApi
* @version 1.1.1-beta2
*/
export default class TemperatureSchedulesApi {

    /**
    * Constructs a new TemperatureSchedulesApi. 
    * @alias module:api/TemperatureSchedulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a temperature schedule
     * Create a new temperature schedule for the authenticated user. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemperatureSchedule} and HTTP response
     */
    createTemperatureScheduleWithHttpInfo(body) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemperatureSchedule;

      return this.apiClient.callApi(
        '/temperature-schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a temperature schedule
     * Create a new temperature schedule for the authenticated user. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemperatureSchedule}
     */
    createTemperatureSchedule(body) {
      return this.createTemperatureScheduleWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a temperature schedule by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTemperatureScheduleWithHttpInfo(schedule) {
      let postBody = null;

      let pathParams = {
        'schedule': schedule
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/temperature-schedules/{schedule}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a temperature schedule by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTemperatureSchedule(schedule) {
      return this.deleteTemperatureScheduleWithHttpInfo(schedule)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a temperature schedule by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemperatureSchedule} and HTTP response
     */
    getTemperatureScheduleWithHttpInfo(schedule) {
      let postBody = null;

      let pathParams = {
        'schedule': schedule
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemperatureSchedule;

      return this.apiClient.callApi(
        '/temperature-schedules/{schedule}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a temperature schedule by ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemperatureSchedule}
     */
    getTemperatureSchedule(schedule) {
      return this.getTemperatureScheduleWithHttpInfo(schedule)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of temperature schedules
     * Get a list of temperature schedules for the authenticated user. Optionally filter by a device id. 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTemperatureSchedulesResponse} and HTTP response
     */
    getTemperatureSchedulesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'device': opts['device']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTemperatureSchedulesResponse;

      return this.apiClient.callApi(
        '/temperature-schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of temperature schedules
     * Get a list of temperature schedules for the authenticated user. Optionally filter by a device id. 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTemperatureSchedulesResponse}
     */
    getTemperatureSchedules(opts) {
      return this.getTemperatureSchedulesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
