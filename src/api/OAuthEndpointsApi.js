/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AccessToken from '../model/AccessToken';
import OAuthError from '../model/OAuthError';

/**
* OAuthEndpoints service.
* @module api/OAuthEndpointsApi
* @version 1.1.1-beta2
*/
export default class OAuthEndpointsApi {

    /**
    * Constructs a new OAuthEndpointsApi. 
    * @alias module:api/OAuthEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Exchange either a username and password for an access and refresh token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccessToken} and HTTP response
     */
    postOauthPasswordWithHttpInfo(grantType, username, password) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'grant_type': grantType,
        'username': username,
        'password': password
      };

      let authNames = ['httpBasicClientCredentials'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AccessToken;

      return this.apiClient.callApi(
        '/oauth/token#p', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Exchange either a username and password for an access and refresh token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccessToken}
     */
    postOauthPassword(grantType, username, password) {
      return this.postOauthPasswordWithHttpInfo(grantType, username, password)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Exchange either a refresh token for an access token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccessToken} and HTTP response
     */
    postOauthRefreshWithHttpInfo(grantType, refreshToken) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'grant_type': grantType,
        'refresh_token': refreshToken
      };

      let authNames = ['httpBasicClientCredentials'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AccessToken;

      return this.apiClient.callApi(
        '/oauth/token#r', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Exchange either a refresh token for an access token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccessToken}
     */
    postOauthRefresh(grantType, refreshToken) {
      return this.postOauthRefreshWithHttpInfo(grantType, refreshToken)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
