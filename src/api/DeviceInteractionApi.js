/**
 * Conrad Connect PaaS API v1.1.1 - CONFIDENTIAL
 * This document is strictly private, confidential and personal to its recipients and should not be copied, distributed or reproduced in whole or in part, nor passed to any third party. Defines the initial endpoints of the backend supported by CC that are relevant for the PaaS solution. 
 *
 * OpenAPI spec version: 1.1.1-beta2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ActuateDeviceBody from '../model/ActuateDeviceBody';
import DeviceType from '../model/DeviceType';
import Event from '../model/Event';
import GetDeviceEventSubscriptionsResponse from '../model/GetDeviceEventSubscriptionsResponse';
import GetDeviceTypesResponse from '../model/GetDeviceTypesResponse';
import GetDevicesSummaryResponse from '../model/GetDevicesSummaryResponse';
import SubscribeToDeviceEventBody from '../model/SubscribeToDeviceEventBody';
import SubscribeToDeviceEventResponse from '../model/SubscribeToDeviceEventResponse';

/**
* DeviceInteraction service.
* @module api/DeviceInteractionApi
* @version 1.1.1-beta2
*/
export default class DeviceInteractionApi {

    /**
    * Constructs a new DeviceInteractionApi. 
    * @alias module:api/DeviceInteractionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Perform an action on a device
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    actuateDeviceWithHttpInfo(device, opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'device': device
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/abstraction/device/{device}/actuate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Perform an action on a device
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    actuateDevice(device, opts) {
      return this.actuateDeviceWithHttpInfo(device, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get historical data for a readable property of a device
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getDeviceDataForPropertyWithHttpInfo(device, property, opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'device': device,
        'property': property
      };
      let queryParams = {
        'from': opts['from'],
        'until': opts['until'],
        'grouping': opts['grouping'],
        'aggregate': opts['aggregate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/abstraction/device/{device}/data/{property}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get historical data for a readable property of a device
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getDeviceDataForProperty(device, property, opts) {
      return this.getDeviceDataForPropertyWithHttpInfo(device, property, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of running subscriptions, started by the abstraction API
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GetDeviceEventSubscriptionsResponse>} and HTTP response
     */
    getDeviceEventSubscriptionsWithHttpInfo(token) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceEventSubscriptionsResponse];

      return this.apiClient.callApi(
        '/abstraction/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of running subscriptions, started by the abstraction API
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GetDeviceEventSubscriptionsResponse>}
     */
    getDeviceEventSubscriptions(token) {
      return this.getDeviceEventSubscriptionsWithHttpInfo(token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of supported device types
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GetDeviceTypesResponse>} and HTTP response
     */
    getDeviceTypesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDeviceTypesResponse];

      return this.apiClient.callApi(
        '/abstraction/device-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of supported device types
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GetDeviceTypesResponse>}
     */
    getDeviceTypes() {
      return this.getDeviceTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the current state of the abstraction layer with complete list of all currently used types and property and event names. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GetDevicesSummaryResponse>} and HTTP response
     */
    getDevicesSummaryWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetDevicesSummaryResponse];

      return this.apiClient.callApi(
        '/abstraction/list-all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the current state of the abstraction layer with complete list of all currently used types and property and event names. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GetDevicesSummaryResponse>}
     */
    getDevicesSummary() {
      return this.getDevicesSummaryWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the latest value for a readable property of a device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getLatestDeviceDataForPropertyWithHttpInfo(device, property) {
      let postBody = null;

      let pathParams = {
        'device': device,
        'property': property
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/abstraction/device/{device}/data/{property}/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the latest value for a readable property of a device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getLatestDeviceDataForProperty(device, property) {
      return this.getLatestDeviceDataForPropertyWithHttpInfo(device, property)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query devices of a user
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getUserDevicesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'types': this.apiClient.buildCollectionParam(opts['types'], 'multi'),
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'multi'),
        'events': this.apiClient.buildCollectionParam(opts['events'], 'multi'),
        'readableProperties': this.apiClient.buildCollectionParam(opts['readableProperties'], 'multi'),
        'writableProperties': this.apiClient.buildCollectionParam(opts['writableProperties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/abstraction/device', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Query devices of a user
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getUserDevices(opts) {
      return this.getUserDevicesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Subscribe to an event of a device
     * You provide a device id, an event, an optional callback url and a payload to be sent back. Every time the device (sensor) triggers the event, the callback url (or the default mydaco API) will receive a message. The response message contains the parameters token, device, event, value and task. Token, device and event are as specified in the event subscription.  The parameter value is reserved for events which provide some sensor data, for example thermostats would provide the current temperature. It&#x27;s currently not in use.  The mydaco API will also receive the id of the waylay task that includes the sensor plugs, which trigger this event. 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscribeToDeviceEventResponse} and HTTP response
     */
    subscribeToDeviceEventWithHttpInfo(device, opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'device': device
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscribeToDeviceEventResponse;

      return this.apiClient.callApi(
        '/abstraction/device/{device}/event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Subscribe to an event of a device
     * You provide a device id, an event, an optional callback url and a payload to be sent back. Every time the device (sensor) triggers the event, the callback url (or the default mydaco API) will receive a message. The response message contains the parameters token, device, event, value and task. Token, device and event are as specified in the event subscription.  The parameter value is reserved for events which provide some sensor data, for example thermostats would provide the current temperature. It&#x27;s currently not in use.  The mydaco API will also receive the id of the waylay task that includes the sensor plugs, which trigger this event. 
     * @param {Object} opts Optional parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscribeToDeviceEventResponse}
     */
    subscribeToDeviceEvent(device, opts) {
      return this.subscribeToDeviceEventWithHttpInfo(device, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unsubscribes from an event
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    unsubscribeFromDeviceEventWithHttpInfo(subscription) {
      let postBody = null;

      let pathParams = {
        'subscription': subscription
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/abstraction/event/{subscription}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unsubscribes from an event
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    unsubscribeFromDeviceEvent(subscription) {
      return this.unsubscribeFromDeviceEventWithHttpInfo(subscription)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
